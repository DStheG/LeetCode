class Solution:
    def minMalwareSpread(self, graph: list[list[int]], initial: list[int]) -> int:
        ret = 0
        m = len(graph) + 1
        for i, _ in enumerate(initial):
            n_init = (initial[:i] + initial[i+1:])
            if (n_init != None):
                val = self._minMalwareSpread(graph, n_init)
                if (val < m):
                    m = val
                    ret = initial[i]
        return ret

    def _minMalwareSpread(self, graph: list[list[int]], initial: list[int]) -> int:
        infected = initial
        visit = [False] * len(graph)
        while(len(infected)):
            idx = infected.pop()
            if visit[idx]:
                continue
            visit[idx] = True
            for i in range(len(graph)):
                if not visit[i] and graph[idx][i]:
                    infected.append(i)
        return sum(visit)

        

s = Solution()
print(s.minMalwareSpread([[1,1,1],[1,1,1],[1,1,1]], [1, 2]))